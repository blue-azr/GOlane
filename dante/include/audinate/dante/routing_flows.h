/*
 * File     : $RCSfile$
 * Created  : July 2008
 * Updated  : $Date$
 * Author   : James Westendorp
 * Synopsis : Routing template routing types and functions.
 *
 * Copyright ï¿½ 2024 Audinate Pty Ltd ACN 120 828 006 (Audinate). All rights reserved.
 *
 *
 * 1.	Subject to the terms and conditions of this Licence, Audinate hereby grants you a worldwide, non-exclusive,
 *        no-charge, royalty free licence to copy, modify, merge, publish, redistribute, sublicense, and/or sell the
 *        Software, provided always that the following conditions are met:
 *        1.1.	the Software must accompany, or be incorporated in a licensed Audinate product, solution or offering
 *                or be used in a product, solution or offering which requires the use of another licensed Audinate
 *                product, solution or offering. The Software is not for use as a standalone product without any
 *                reference to Audinate's products;
 *        1.2.	the Software is provided as part of example code and as guidance material only without any warranty
 *                or expectation of performance, compatibility, support, updates or security; and
 *        1.3.	the above copyright notice and this License must be included in all copies or substantial portions
 *                of the Software, and all derivative works of the Software, unless the copies or derivative works are
 *                solely in the form of machine-executable object code generated by the source language processor.
 *
 * 2.	TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *        EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 *        PURPOSE AND NONINFRINGEMENT.
 *
 * 3.	TO THE FULLEST EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT SHALL AUDINATE BE LIABLE ON ANY LEGAL THEORY
 *        (INCLUDING, WITHOUT LIMITATION, IN AN ACTION FOR BREACH OF CONTRACT, NEGLIGENCE OR OTHERWISE) FOR ANY CLAIM,
 *        LOSS, DAMAGES OR OTHER LIABILITY HOWSOEVER INCURRED.  WITHOUT LIMITING THE SCOPE OF THE PREVIOUS SENTENCE THE
 *        EXCLUSION OF LIABILITY SHALL INCLUDE: LOSS OF PRODUCTION OR OPERATION TIME, LOSS, DAMAGE OR CORRUPTION OF
 *        DATA OR RECORDS; OR LOSS OF ANTICIPATED SAVINGS, OPPORTUNITY, REVENUE, PROFIT OR GOODWILL, OR OTHER ECONOMIC
 *        LOSS; OR ANY SPECIAL, INCIDENTAL, INDIRECT, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY DAMAGES, ARISING OUT OF OR
 *        IN CONNECTION WITH THIS AGREEMENT, ACCESS OF THE SOFTWARE OR ANY OTHER DEALINGS WITH THE SOFTWARE, EVEN IF
 *        AUDINATE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH CLAIM, LOSS, DAMAGES OR OTHER LIABILITY.
 *
 * 4.	APPLICABLE LEGISLATION SUCH AS THE AUSTRALIAN CONSUMER LAW MAY APPLY REPRESENTATIONS, WARRANTIES, OR CONDITIONS,
 *        OR IMPOSE OBLIGATIONS OR LIABILITY ON AUDINATE THAT CANNOT BE EXCLUDED, RESTRICTED OR MODIFIED TO THE FULL
 *        EXTENT SET OUT IN THE EXPRESS TERMS OF THIS CLAUSE ABOVE "CONSUMER GUARANTEES".	 TO THE EXTENT THAT SUCH CONSUMER
 *        GUARANTEES CONTINUE TO APPLY, THEN TO THE FULL EXTENT PERMITTED BY THE APPLICABLE LEGISLATION, THE LIABILITY OF
 *        AUDINATE UNDER THE RELEVANT CONSUMER GUARANTEE IS LIMITED (WHERE PERMITTED AT AUDINATE'S OPTION) TO ONE OF THE
 *        FOLLOWING REMEDIES OR SUBSTANTIALLY EQUIVALENT REMEDIES:
 *        4.1.	THE REPLACEMENT OF THE SOFTWARE, THE SUPPLY OF EQUIVALENT SOFTWARE, OR SUPPLYING RELEVANT SERVICES AGAIN;
 *        4.2.	THE REPAIR OF THE SOFTWARE;
 *        4.3.	THE PAYMENT OF THE COST OF REPLACING THE SOFTWARE, OF ACQUIRING EQUIVALENT SOFTWARE, HAVING THE RELEVANT
 *                SERVICES SUPPLIED AGAIN, OR HAVING THE SOFTWARE REPAIRED.
 *
 * 5.	This License does not grant any permissions or rights to use the trade marks (whether registered or unregistered),
 *        the trade names, or product names of Audinate.
 *
 * 6.	If you choose to redistribute or sell the Software you may elect to offer support, maintenance, warranties,
 *        indemnities or other liability obligations or rights consistent with this License. However, you may only act on
 *        your own behalf and must not bind Audinate. You agree to indemnify and hold harmless Audinate, and its affiliates
 *        from any liability claimed or incurred by reason of your offering or accepting any additional warranty or additional
 *        liability.
 */

/**
 * @file routing_flows.h
 *
 * Routing flow types and definitions. These functions allow a host
 * application to control the way audio routes are established in order
 * to provide predictable flow creation and
 * thus predictable network utilitization.
 *
 * There are several elements to template-based routing:
 * - Configuring the properties of a receive flow to control its source 
 *   device and overall link utilization 
 * - For multicast routing, configuring a multicast transmit flow 
 * - Associating recieve channels with receive flows. Channels that have
 *   an associated flow will only attempt to complete their
 *   subscriptions using the given flow and will not initiate ad-hoc
 *   subscription completion, ensuring  predictable resource usage.
 */
#ifndef _DANTE_ROUTING_FLOWS_H
#define _DANTE_ROUTING_FLOWS_H

#ifndef DAPI_FLAT_INCLUDE
#include "dante/routing.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif


//----------------------------------------------------------
// Tx Flow user-configuration information
//----------------------------------------------------------

/**
 * Was this flow manually or automatically configured?
 *
 * @param flow the flow handle
 * @param manual_ptr a pointer to a location to store the flow's 'manual' status
 */
aud_error_t
dr_txflow_is_manual
(
	dr_txflow_t * flow,
	aud_bool_t * manual_ptr
);

//----------------------------------------------------------
// Tx Flow configuration
//----------------------------------------------------------

/**
 * Create a new transmit flow configuration object
 *
 * @param device the device to be configured
 * @param id the id of the flow to be configured
 * @param num_slots the number of slots the flow will have
 * @param config_ptr a pointer to the flow configation handle
 *
 * @return AUD_SUCCESS if the flow configuration object was successfully
 *   created or an error otherwise
 */
aud_error_t
dr_txflow_config_new
(
	dr_device_t * device,
	uint16_t id,
	uint16_t num_slots,
	dr_txflow_config_t ** config_ptr
);

/**
 * Get a transmit flow configuration object that allows modifications to
 * an existing user-configured flow. A modify operation only allows changes
 * to the channels in the flow's slot contents.
 *
 * A modify operation guarantees glitch-free operation for all
 *   slots that are not altered.
 *
 * @param flow the flow to be modified
 * @param config_ptr a pointer to a location to hold the new config object
 *   pointer
 *
 * @note 'flow' must be an existing user-configured flow. 
 *   It is illegal to modify automatically-configured flows.
 */
aud_error_t
dr_txflow_replace_channels
(
	dr_txflow_t * flow,
	dr_txflow_config_t ** config_ptr
);

/**
 * How many slots are in the flow configuration object?
 *
 * @param config the config object
 *
 * @return the numbner of flow slots specified by the configuration object
 */
uint16_t
dr_txflow_config_num_slots
(
	dr_txflow_config_t * config
);

/**
 * Get the channel at the given slot for this flow configuration object
 *
 * @param config the config object
 * @param slot the zero-based slot index 
 *
 * @return the channel at the given slot for this flow configuration object
 */
dr_txchannel_t * 
dr_txflow_config_channel_at_slot
(
	dr_txflow_config_t * config,
	uint16_t slot
);

/**
 * What is the name of the flow being configured? May be NULL if a new flow
 * is being configured and no name has been set.
 *
 * @param config the config object
 *
 * @return the configured name for this flow
 */
const char *
dr_txflow_config_get_name
(
	const dr_txflow_config_t * config
);


/**
 * Add a channel to a flow at the given slot. If the channel is already in
 * the flow, it will be moved to the given slot and the old slot marked as
 * empty.
 *
 * @param config the config object
 * @param channel the transmit channel to be added to this config or moved
 * @param slot the zero-based index of the slot where the channel will be
 * added / moved
 *
 * @return AUD_SUCCESS if the channel was added / moved to the slot or an
 *   error otherwise.
 */
aud_error_t
dr_txflow_config_add_channel
(
	dr_txflow_config_t * config,
	dr_txchannel_t * channel,
	uint16_t slot
);

/**
 * Remove a channel from the flow. The slot that contained the channel is
 * now empty.
 *
 * @param config the config object
 * @param channel the transmit channel to be remove
 *
 * @return AUD_SUCCESS if the channel was removed from the configuration
 *   or an error otherwise.
 */
aud_error_t
dr_txflow_config_remove_channel
(
	dr_txflow_config_t * config,
	dr_txchannel_t * channel
);

/**
 * Set the name for the flow being configured.
 *
 * @param config the config object
 * @param name the new name for the flow. If NULL then the flow will
 *   revert to its default name.
 * 
 * @return AUD_SUCCESS if the flow config was updated or an error
 *   otherwise
 */
aud_error_t
dr_txflow_config_set_name
(
	dr_txflow_config_t * config,
	const char * name
);

/**
 * Set the latency for the flow being configured.
 *
 * @param config the config object
 * @param latency_us the new latency for the config object, in microseconds. If latency is zero then
 *   the flow will use the device's default tx latency value
 * 
 * @return AUD_SUCCESS if the flow config was updated or an error
 *   otherwise
 *
 * @note Tx flow configuration is not supported on older Dante devices.
 */
aud_error_t
dr_txflow_config_set_latency_us
(
	dr_txflow_config_t * config,
	dante_latency_us_t latency_us
);

/**
 * Set the frames-per-packet for the flow being configured.
 *
 * @param config the config object
 * @param fpp the new frames-per-packet for the config object. If fpp is zero then
 *   the flow will use the device's default tx fpp value
 * 
 * @return AUD_SUCCESS if the flow config was updated or an error
 *   otherwise
 */
aud_error_t
dr_txflow_config_set_fpp
(
	dr_txflow_config_t * config,
	dante_fpp_t fpp
);

/**
 * Set the encoding for the given flow config.
 *
 * @param config the te flow config
 * @param encoding the encoding for the flow
 * 
 * @return AUD_SUCCESS if the flow config was updated or an error
 *   otherwise
 */
aud_error_t
dr_txflow_config_set_encoding
(
	dr_txflow_config_t * config,
	dante_encoding_t encoding
);

/**
 * Commit the changes specified by the 'config' object.
 * This operation also releases the config object handle.
 *
 * @note Successful completion of this function does not mean that the
 *   configuration change was successfully applied on the device, just
 *   that the message was successfully sent to the device.
 *
 * @param config the config object
 * @param response_fn the function to call upon completion of this
 *   operation
 * @param request_id the id for this operation
 *
 * @return AUD_SUCCESS if the configuration was sent to the device, or an
 *   error otherwise
 */
aud_error_t
dr_txflow_config_commit
(
	dr_txflow_config_t * config,
	dr_device_response_fn * response_fn,
	dante_request_id_t * request_id
);

/**
 * Discard the changes specified by the 'config' object
 * This operation also releases the config object handle.
 *
 * @param config the config object
 *
 * @return AUD_SUCCESS
 */
aud_error_t
dr_txflow_config_discard
(
	dr_txflow_config_t * config
);

/**
 * Delete the flow and release the handle. This operation is 
 * only allowed on user-configured flows.
 *
 * @note Successful completion of this function does not mean that the
 *   configuration change was successfully appliedon on the device, just
 *   that the message was successfully sent to the device.
 *
 * @param flow_ptr a pointer to a flow handle
 * @param response_fn the function to call upon completion of this
 *   operation
 * @param request_id the id for this operation
 *
 * @return AUD_SUCCESS if a delete message was successfully sent to the
 *   device or an error otherwise
 */
aud_error_t
dr_txflow_delete
(
	dr_txflow_t ** flow_ptr,
	dr_device_response_fn * response_fn,
	dante_request_id_t * request_id
);


/**
 * Delete all user-configured transmit flows.
 * 
 * @note Successful completion of this function does not mean that the
 *   configuration change was successfully applied on on the device, just
 *   that the message was successfully sent to the device.
 *
 * @param device the device to be configured
 * @param response_fn the function to call upon completion of this
 *   operation
 * @param request_id the id for this operation
 *
 * @return AUD_SUCCESS if a delete message was successfully sent to the
 *   device or an error otherwise
 */
aud_error_t
dr_device_delete_all_txflows
(
	dr_device_t * device,
	dr_device_response_fn * response_fn,
	dante_request_id_t * request_id
);


//----------------------------------------------------------
// Rx Flow Configuration 
//----------------------------------------------------------

struct dr_rxflow_config;
/**
 * A handle for a receive flow configuration structure. A receive
 * flow configuration is created and manipulated as appropriate. The
 * configuration is then either applied or discarded.
 */
typedef struct dr_rxflow_config dr_rxflow_config_t;

/**
 * How many slots are in the flow configuration object?
 *
 * @param config the configuration object
 *
 * @return the number of slots in the configuration object
 */
uint16_t
dr_rxflow_config_num_slots
(
	const dr_rxflow_config_t * config
);

/**
 * What is the current samplerate for the flow configuration object?
 *
 * @param config the configuration object
 *
 * @return the samplerate of the configuration object
 */
dante_samplerate_t
dr_rxflow_config_get_samplerate
(
	const dr_rxflow_config_t * config
);

/**
 * What is the current audio encoding for the flow configuration object?
 *
 * @param config the configuration object
 *
 * @return the audio encoding of the configuration object
 */
dante_encoding_t
dr_rxflow_config_get_encoding
(
	const dr_rxflow_config_t * config
);

/**
 * What is the transmit device name for this flow configuration object?
 *
 * @param config the configuration object
 *
 * @return the transmit device name of the configuration object
 */
const char *
dr_rxflow_config_get_tx_device_name
(
	const dr_rxflow_config_t * config
);

/**
 * What is the transmit flow name for this flow configuration object?
 * Note that this value is only set for multicast template flow
 * configuration objects.
 *
 * @param config the configuration object
 *
 * @return the transmit flow name of the configuration object
 */
const char *
dr_rxflow_config_get_tx_flow_name
(
	const dr_rxflow_config_t * config
);

/**
 * Set the audio encoding for this flow.
 *
 * @param config configuration object
 * @param encoding encoding for flow
 *
 * Encoding might not be checked for consistency until commit.
 */
aud_error_t
dr_rxflow_config_set_encoding
(
	dr_rxflow_config_t * config,
	dante_encoding_t encoding
);

/**
 * Commit the changes specified by the 'config' object.
 *
 * @note When this function completes successfully,
 *   (a) the configuration is sent but not yet applied to the device,
 *   (b) the config object handle is released
 *
 * @param config the configuration object
 * @param response_fn the function to call when a response is received
 *   for this operation.
 * @param request_id the request id for this operation
 *
 * @return AUD_SUCCESS if the configuration was sent to the device, or an
 *   error otherwise.
 */
aud_error_t
dr_rxflow_config_commit
(
	dr_rxflow_config_t * config,
	dr_device_response_fn * response_fn,
	dante_request_id_t * request_id
);

/**
 * Discard the changes specified by the 'config' object
 * This operation also releases the config object handle.
 *
 * @param config the configuration object
 *
 * @return AUD_SUCCESS
 */
aud_error_t
dr_rxflow_config_discard
(
	dr_rxflow_config_t * config
);

/**
 * Delete a user-configured flow. This function also clears the
 * subscriptions and associations for any channels that were associated
 * with this flow
 *
 * @note Successful completion of this function does not mean that the
 *   configuration change was successfully applied on the device, just
 *   that the message was successfully sent to the device.
 *
 * @param flow_ptr A pointer to the flow handle
 * @param response_fn the function to call upon completion of this
 *   operation
 * @param request_id the id for this operation
 *
 * @return AUD_SUCCESS if the message was successfully sent to the device
 *   or an error otherwise
 */
aud_error_t
dr_rxflow_delete
(
	dr_rxflow_t ** flow_ptr,
	dr_device_response_fn * response_fn,
	dante_request_id_t * request_id
);

/**
 * Delete one or more flows identified by their ids
 *
 * @note Successful completion of this function does not mean that the
 *   configuration change was successfully applied on the device, just
 *   that the message was successfully sent to the device.
 *
 * @param device The device to be configured
 * @param response_fn the function to call upon completion of this
 *   operation
 * @param request_id the id for this operation
 * @param num_flow_ids the number of flow ids in the flow_ids array
 * @param flow_ids the ids of the flows to be deleted
 *
 * @return AUD_SUCCESS if the message was successfully sent to the device
 *   or an error otherwise
 */
aud_error_t
dr_device_delete_rxflows
(
	dr_device_t * device,
	dr_device_response_fn * response_fn,
	dante_request_id_t * request_id,
	unsigned int num_flow_ids,
	const dante_id_t * flow_ids
);

/**
 * Delete all user-configured flows on the device.
 * This function also clears all subscriptions and all associations
 * for any channels associated with any user-configured flow.
 *
 * @note Successful completion of this function does not mean that the
 *   configuration change was successfully applied on the device, just
 *   that the message was successfully sent to the device.
 *
 * @param device The device to be configured
 * @param response_fn the function to call upon completion of this
 *   operation
 * @param request_id the id for this operation
 *
 * @return AUD_SUCCESS if the message was successfully sent to the device
 *   or an error otherwise
 */
aud_error_t
dr_device_delete_all_rxflows
(
	dr_device_t * device,
	dr_device_response_fn * response_fn,
	dante_request_id_t * request_id
);


#ifdef __cplusplus
}
#endif

#endif

/*
 * Copyright Â© 2024 Audinate Pty Ltd ACN 120 828 006 (Audinate). All rights reserved.
 */

