/*
 * Copyright © 2014-2025 Audinate Pty Ltd ACN 120 828 006 (Audinate). All rights reserved.
 *
 *
 * 1.	Subject to the terms and conditions of this Licence, Audinate hereby grants you a worldwide, non-exclusive,
 *		no-charge, royalty free licence to copy, modify, merge, publish, redistribute, sublicense, and/or sell the
 *		Software, provided always that the following conditions are met:
 *		1.1.	the Software must accompany, or be incorporated in a licensed Audinate product, solution or offering
 *				or be used in a product, solution or offering which requires the use of another licensed Audinate
 *				product, solution or offering. The Software is not for use as a standalone product without any
 *				reference to Audinate's products;
 *		1.2.	the Software is provided as part of example code and as guidance material only without any warranty
 *				or expectation of performance, compatibility, support, updates or security; and
 *		1.3.	the above copyright notice and this License must be included in all copies or substantial portions
 *				of the Software, and all derivative works of the Software, unless the copies or derivative works are
 *				solely in the form of machine-executable object code generated by the source language processor.
 *
 * 2.	TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *		EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 *		PURPOSE AND NONINFRINGEMENT.
 *
 * 3.	TO THE FULLEST EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT SHALL AUDINATE BE LIABLE ON ANY LEGAL THEORY
 *		(INCLUDING, WITHOUT LIMITATION, IN AN ACTION FOR BREACH OF CONTRACT, NEGLIGENCE OR OTHERWISE) FOR ANY CLAIM,
 *		LOSS, DAMAGES OR OTHER LIABILITY HOWSOEVER INCURRED.  WITHOUT LIMITING THE SCOPE OF THE PREVIOUS SENTENCE THE
 *		EXCLUSION OF LIABILITY SHALL INCLUDE: LOSS OF PRODUCTION OR OPERATION TIME, LOSS, DAMAGE OR CORRUPTION OF
 *		DATA OR RECORDS; OR LOSS OF ANTICIPATED SAVINGS, OPPORTUNITY, REVENUE, PROFIT OR GOODWILL, OR OTHER ECONOMIC
 *		LOSS; OR ANY SPECIAL, INCIDENTAL, INDIRECT, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY DAMAGES, ARISING OUT OF OR
 *		IN CONNECTION WITH THIS AGREEMENT, ACCESS OF THE SOFTWARE OR ANY OTHER DEALINGS WITH THE SOFTWARE, EVEN IF
 *		AUDINATE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH CLAIM, LOSS, DAMAGES OR OTHER LIABILITY.
 *
 * 4.	APPLICABLE LEGISLATION SUCH AS THE AUSTRALIAN CONSUMER LAW MAY APPLY REPRESENTATIONS, WARRANTIES, OR CONDITIONS,
 *		OR IMPOSES OBLIGATIONS OR LIABILITY ON AUDINATE THAT CANNOT BE EXCLUDED, RESTRICTED OR MODIFIED TO THE FULL
 *		EXTENT SET OUT IN THE EXPRESS TERMS OF THIS CLAUSE ABOVE "CONSUMER GUARANTEES".	 TO THE EXTENT THAT SUCH CONSUMER
 *		GUARANTEES CONTINUE TO APPLY, THEN TO THE FULL EXTENT PERMITTED BY THE APPLICABLE LEGISLATION, THE LIABILITY OF
 *		AUDINATE UNDER THE RELEVANT CONSUMER GUARANTEE IS LIMITED (WHERE PERMITTED AT AUDINATE'S OPTION) TO ONE OF
 *		FOLLOWING REMEDIES OR SUBSTANTIALLY EQUIVALENT REMEDIES:
 *		4.1.	THE REPLACEMENT OF THE SOFTWARE, THE SUPPLY OF EQUIVALENT SOFTWARE, OR SUPPLYING RELEVANT SERVICES AGAIN;
 *		4.2.	THE REPAIR OF THE SOFTWARE;
 *		4.3.	THE PAYMENT OF THE COST OF REPLACING THE SOFTWARE, OF ACQUIRING EQUIVALENT SOFTWARE, HAVING THE RELEVANT
 *				SERVICES SUPPLIED AGAIN, OR HAVING THE SOFTWARE REPAIRED.
 *
 * 5.	This License does not grant any permissions or rights to use the trade marks (whether registered or unregistered),
 *		the trade names, or product names of Audinate.
 *
 * 6.	If you choose to redistribute or sell the Software you may elect to offer support, maintenance, warranties,
 *		indemnities or other liability obligations or rights consistent with this License. However, you may only act on
 *		your own behalf and must not bind Audinate. You agree to indemnify and hold harmless Audinate, and its affiliates
 *		from any liability claimed or incurred by reason of your offering or accepting any additional warranty or additional
 *		liability.
 *
 */

/*
 * Created  : October 2014
 * Author   : Andrew White, Michael Ung
 * Synopsis : Macros for manipulating bitmaps
 */

#ifndef _AUD_PLATFORM_FLAGS_UTIL_H
#define _AUD_PLATFORM_FLAGS_UTIL_H

#ifndef AUD_PLATFORM
#error platform_flags_util.h should never be included directly
#endif

#ifdef __cplusplus
extern "C" {
#endif

//--------------------
/*
	Macro wrappers for common bitfield / bitflag operations.

	NOTE: arguments may be evaluated more than once. If arguments have
		side-effects, behaviour is undefined.
 */

// Set the listed flag (or flags).  Returns field.
#define AUD_FLAG_SET(field,flag) ((field) |= (flag))

// Clear the listed flag (or flags).  Returns field.
#define AUD_FLAG_CLR(field,flag) ((field) &= ~(flag))

// True if any listed flag is set  (null set => false)
#define AUD_FLAG_ISSET(field,flag) ((field) & (flag))

// True if all listed flags are set (null set => true)
#define AUD_FLAG_ISSET_ALL(field,flag) (((field) & (flag)) == (flag))

// Set the listed flag (or flags) to the given value.  Returns field.
#define AUD_FLAG_SET_VALUE(field,flag,value) \
	((value) ? AUD_FLAG_SET(field,flag) : AUD_FLAG_CLR(field,flag))

// Invert the listed flag (or flags).  Returns field.
#define AUD_FLAG_INVERT(field,flag) ((field) ^= (flag))

// Set the flags covered by the mask to the given flag values.
//	Other flags are unchanged.  Returns field.
//	Note: This is equivalent to AUD_FLAG_SET_VALUE, with value treated as a
//		flag-set rather than a boolean.
//		The two calls are identical when values is 0 or ~0.
#define AUD_FLAG_SET_MASKED(field,mask,flags) \
	((field) = ((field) & ~(mask)) | ((mask) & (flags)))

#define AUD_FLAG_SET_MASKED_FLAGS AUD_FLAG_SET_MASKED
	// synonyms, prefer former in new code

// True if masked flags are set identically
#define AUD_FLAG_ISSET_MASKED(field,mask,flags) \
	(((field) & (mask)) == ((flags) & (mask)))


// As AUD_FLAG_SET / AUD_FLAG_CLR, but only perform operation if required
#define AUD_FLAG_SETIF(field, flag) { if (!AUD_FLAG_ISSET(field,flag)) AUD_FLAG_SET(field,flag); }
#define AUD_FLAG_CLRIF(field, flag) { if (AUD_FLAG_ISSET(field,flag)) AUD_FLAG_CLR(field,flag); }


//----------
// As above, except using indexes rather than flags

// Set the listed flag.  Returns field.
#define AUD_FLAGINDEX_SET(field,idx) AUD_FLAG_SET(field,(1 << (idx)))

// Clear the listed flag.  Returns field.
#define AUD_FLAGINDEX_CLR(field,idx) AUD_FLAG_CLR(field,(1 << (idx)))

// True if listed flag is set
#define AUD_FLAGINDEX_ISSET(field,idx) AUD_FLAG_ISSET(field,(1 << (idx)))

// Set the listed flag to the given value.  Returns field.
#define AUD_FLAGINDEX_SET_VALUE(field,idx,value) \
	AUD_FLAG_SET_VALUE(field,(1 << (idx)),value)

// Invert the listed flag.  Returns field.
#define AUD_FLAGINDEX_INVERT(field,idx) AUD_FLAG_INVERT(field,(1 << (idx)))


//----------
// As AUD_FLAG_SET, but applies a byteswap to flags

// Set the listed flag (or flags).  Returns field.
#define AUD_FLAG_SET_BYTESWAP(field,flag,byteswap_op) ((field) |= byteswap_op(flag))

// Clear the listed flag (or flags).  Returns field.
#define AUD_FLAG_CLR_BYTESWAP(field,flag,byteswap_op) ((field) &= ~byteswap_op(flag))

// True if any listed flag is set  (null set => false)
#define AUD_FLAG_ISSET_BYTESWAP(field,flag,byteswap_op) ((field) & byteswap_op(flag))

// True if all listed flags are set (null set => true)
#define AUD_FLAG_ISSET_ALL_BYTESWAP(field,flag,byteswap_op) (((field) & byteswap_op(flag)) == byteswap_op(flag))

// Set the listed flag (or flags) to the given value.  Returns field.
#define AUD_FLAG_SET_VALUE_BYTESWAP(field,flag,value,byteswap_op) \
	((value) ? AUD_FLAG_SET_BYTESWAP(field,flag,byteswap_op) : AUD_FLAG_CLR_BYTESWAP(field,flag,byteswap_op))


//--------------------

#ifdef __cplusplus
}
#endif

#endif

/*
 * Copyright © 2014-2025 Audinate Pty Ltd ACN 120 828 006 (Audinate). All rights reserved.
 */

